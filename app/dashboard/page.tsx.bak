"use client"

export const dynamic = 'force-dynamic'; // Force page to be dynamically rendered, no caching

import { useEffect, useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { BarChart, LineChart, CartesianGrid, XAxis, YAxis, Legend, Bar, Line, ResponsiveContainer, Tooltip, Cell } from "recharts"
import { ArrowUpRight, DollarSign, ShoppingCart, TrendingUp, AlertCircle, FileText, RefreshCw, ListFilter, X, CalendarIcon, Filter } from "lucide-react"
import { checkApiHealth, getDashboardData, getDataFiles, selectDataFile, reloadDataFiles } from "@/lib/api"
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useToast } from "@/components/ui/use-toast"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { useRouter } from "next/navigation"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { 
  Popover,
  PopoverContent,
  PopoverTrigger 
} from "@/components/ui/popover"
import { Calendar } from "@/components/ui/calendar"
import { format } from "date-fns"
import { Input } from "@/components/ui/input"

// Data File Indicator Component
const DataFileIndicator = ({ onReload }: { onReload: () => void }) => {
  const { toast } = useToast()
  const [dataFiles, setDataFiles] = useState<string[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")

  useEffect(() => {
    fetchDataFiles()
  }, [])

  const fetchDataFiles = async () => {
    try {
      const data = await getDataFiles()
      setDataFiles(data.files || [])
    } catch (err) {
      setError("Failed to load data files")
    }
  }
  
  const handleReloadFiles = async () => {
    setIsLoading(true)
    setError("")
    
    try {
      await reloadDataFiles()
      fetchDataFiles()
      toast({
        title: "Data files reloaded",
        description: `Using combined data from ${dataFiles.length} files.`,
      })
      onReload()
    } catch (err) {
      setError("Failed to reload data files")
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="mb-6 flex items-center space-x-4">
      <div className="flex items-center">
        <FileText className="h-5 w-5 mr-2 text-muted-foreground" />
        <span className="text-sm font-medium">Data source:</span>
      </div>
      <Badge variant="outline" className="font-mono">
        Using combined data from {dataFiles.length} file{dataFiles.length !== 1 ? 's' : ''}
      </Badge>
      <Button 
        variant="outline" 
        size="icon" 
        onClick={handleReloadFiles} 
        disabled={isLoading}
        title="Reload data files"
      >
        <RefreshCw className="h-4 w-4" />
      </Button>
      {error && <span className="text-sm text-destructive">{error}</span>}
    </div>
  )
}

interface Product {
  id: number;
  name: string;
  rank?: string;
  profit: number;
  revenue: number;
}

export default function DashboardPage() {
  // Add the router for refresh capability
  const router = useRouter();
  // State for API status
  const [apiStatus, setApiStatus] = useState("loading")
  // State for loading indicators
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState("")
  
  // State for dashboard data
  const [revenueData, setRevenueData] = useState<any[]>([])
  const [productRevenueData, setProductRevenueData] = useState<any[]>([])
  const [locationRevenueData, setLocationRevenueData] = useState<any[]>([])
  const [topProductsData, setTopProductsData] = useState<Product[]>([])
  const [allProductsData, setAllProductsData] = useState<Product[]>([])
  const [showAllProductsModal, setShowAllProductsModal] = useState(false)
  const [totalPredictedRevenue, setTotalPredictedRevenue] = useState(0)
  const [totalSales, setTotalSales] = useState(0)
  const [averageRevenuePerSale, setAverageRevenuePerSale] = useState(0)
  const [showProfit, setShowProfit] = useState(false)
  const [showFilters, setShowFilters] = useState(false)
  const [dateRange, setDateRange] = useState<{from: Date | undefined, to: Date | undefined}>({
    from: undefined,
    to: undefined
  })
  const [productFilter, setProductFilter] = useState("all")
  const [locationFilter, setLocationFilter] = useState("all")
  const [filteredRevenueData, setFilteredRevenueData] = useState<any[]>([])

  // Add a state for tracking when filters are applied
  const [filtersApplied, setFiltersApplied] = useState(false);

  const NUM_TOP_PRODUCTS = 10; // Show top 10 products
  
  useEffect(() => {
    // Check API health when component mounts
    const checkApi = async () => {
      try {
        const health = await checkApiHealth()
        setApiStatus(health.status)
      } catch (error) {
        setApiStatus("unhealthy")
      }
    }
    
    // Fetch dashboard data from the API
    fetchDashboardData();
    checkApi();
    
    // Listen for data file changes from other parts of the app
    const handleDataFileChanged = (event: Event) => {
      console.log("Data file changed event received");
      // Force refresh data when file changes
      handleDataFileChange();
    };
    
    // Add event listener for data file changes
    window.addEventListener('dataFileChanged', handleDataFileChanged);
    
    // Clean up event listener when component unmounts
    return () => {
      window.removeEventListener('dataFileChanged', handleDataFileChanged);
    };
  }, [])

  // Handle data file change
  const handleDataFileChange = () => {
    // Force a full refresh of the router to clear any client-side caching
    router.refresh();
    fetchDashboardData();
  }

  // Add function to trigger manual refresh
  const handleRefresh = () => {
    router.refresh();
    fetchDashboardData();
  }
  
  // Define a function to process product data
  const processProductData = (data: any) => {
    if (!data?.top_products_data || !Array.isArray(data.top_products_data)) {
      console.warn("Missing or invalid product data");
      return { topProducts: [], allProducts: [] };
    }

    // Get all products and sort by profit
    const allProducts = [...data.top_products_data];
    const sortedAllProducts = [...allProducts].sort((a, b) => b.profit - a.profit);
    
    // Get top 10 products by profit
    const top10Products = sortedAllProducts.slice(0, NUM_TOP_PRODUCTS);
    
    console.log(`Displaying ${top10Products.length} top products out of ${sortedAllProducts.length} total products`);
    
    return { 
      topProducts: top10Products,
      allProducts: sortedAllProducts
    };
  };
  
  // Replace the processDataForChart function with this version for M/YYYY format
  const processDataForChart = (data: any[]) => {
    if (!data || data.length === 0) return [];
    
    // Clone the data to avoid mutating the original
    const processed = data.map(item => {
      if (!item.month) return { ...item, sortOrder: 0 };
      
      // Parse M/YYYY format (e.g., "1/2020", "10/2023")
      const parts = item.month.split('/');
      if (parts.length !== 2) return { ...item, sortOrder: 0 };
      
      const month = parseInt(parts[0]);
      const year = parseInt(parts[1]);
      
      if (isNaN(month) || isNaN(year)) return { ...item, sortOrder: 0 };
      
      // Create a sortable value (year * 100 + month)
      const sortOrder = (year * 100) + month;
      
      return {
        ...item,
        sortOrder,
        numericYear: year,
        numericMonth: month,
        originalMonth: item.month // Keep the original value for display
      };
    });
    
    // Sort by the sortOrder
    return processed.sort((a, b) => a.sortOrder - b.sortOrder);
  };

  // Add a function to get min and max dates from the data
  const getDateRangeFromData = (data: any[]) => {
    if (!data || data.length === 0) return { minDate: undefined, maxDate: undefined };
    
    let minDate: Date | undefined = undefined;
    let maxDate: Date | undefined = undefined;
    
    data.forEach(item => {
      if (!item.month) return;
      
      const parts = item.month.split('/');
      if (parts.length !== 2) return;
      
      const month = parseInt(parts[0]) - 1; // JS months are 0-based
      const year = parseInt(parts[1]);
      
      if (isNaN(month) || isNaN(year)) return;
      
      const itemDate = new Date(year, month, 1);
      
      if (!minDate || itemDate < minDate) {
        minDate = itemDate;
      }
      
      if (!maxDate || itemDate > maxDate) {
        maxDate = itemDate;
      }
    });
    
    return { minDate, maxDate };
  };

  // Update fetchDashboardData to set default date range
  const fetchDashboardData = async () => {
    setIsLoading(true);
    setError("");
    
    try {
      // Add cache busting parameter
      const timestamp = new Date().getTime();
      const data = await getDashboardData(`?_=${timestamp}`);
      
      console.log("Dashboard data received:", data);
      
      // Process product data
      const { topProducts, allProducts } = processProductData(data);
      
      // Store processed data
      setTopProductsData(topProducts);
      setAllProductsData(allProducts);
      
      // Check if profit data exists in the response
      const hasProfitData = data.revenue_data && 
                           data.revenue_data.length > 0 && 
                           'profit' in data.revenue_data[0];
                           
      console.log("Has profit data:", hasProfitData);
      
      // If profit data is missing, add it as a calculated field (40% of revenue)
      interface RevenueDataItem {
        month: string;
        revenue: number;
        profit?: number;
      }
      
      const enhancedRevenueData = data.revenue_data?.map((item: RevenueDataItem) => ({
        ...item,
        profit: item.profit || Math.round(item.revenue * 0.4)
      })) || [];
      
      setRevenueData(enhancedRevenueData);
      // Use the enhanced processing function
      const processedData = processDataForChart(enhancedRevenueData);
      setFilteredRevenueData(processedData);
      
      // Set default date range based on the data
      const { minDate, maxDate } = getDateRangeFromData(enhancedRevenueData);
      if (minDate && maxDate && !dateRange.from && !dateRange.to) {
        console.log("Setting default date range:", minDate, maxDate);
        setDateRange({ from: minDate, to: maxDate });
      }
      
      setProductRevenueData(data.product_revenue_data || []);
      
      // Update to use location_revenue_data instead of customer_revenue_data
      setLocationRevenueData(data.location_revenue_data || []);
      
      // Log the location data for debugging
      console.log("Location data:", data.location_revenue_data);
      
      setTotalPredictedRevenue(data.total_revenue || 0);
      setTotalSales(data.total_sales || 0);
      setAverageRevenuePerSale(data.avg_revenue_per_sale || 0);
    } catch (err) {
      console.error("Error fetching dashboard data:", err);
      setError("Failed to load dashboard data. Please try again later.");
    } finally {
      setIsLoading(false);
    }
  };

  // Update the applyFilters function to properly implement product and location filtering
  const applyFilters = () => {
    console.log("EXPLICITLY Applying filters:", { dateRange, productFilter, locationFilter });
    
    let filtered = [...revenueData];
    let anyFiltersApplied = false;
    
    // Apply date range filter if dates are selected
    if (dateRange.from && dateRange.to) {
      console.log("Filtering by date range:", dateRange.from, dateRange.to);
      anyFiltersApplied = true;
      
      const fromDate = new Date(dateRange.from);
      const toDate = new Date(dateRange.to);
      
      filtered = filtered.filter(item => {
        // Parse M/YYYY format (e.g., "1/2020", "10/2023")
        if (!item.month) return true;
        
        const parts = item.month.split('/');
        if (parts.length !== 2) return true;
        
        const month = parseInt(parts[0]) - 1; // JS months are 0-based
        const year = parseInt(parts[1]);
        
        if (isNaN(month) || isNaN(year)) return true;
        
        const itemDate = new Date(year, month, 1);
        
        return itemDate >= fromDate && itemDate <= toDate;
      });
    }
    
    // Apply product filter if specified
    if (productFilter && productFilter !== "all") {
      console.log("Filtering by product:", productFilter);
      anyFiltersApplied = true;
      
      try {
        // Extract product ID from the filter name
        const productId = parseInt(productFilter.replace("Product ", ""));
        const productObj = allProductsData.find(p => p.name === productFilter);
        
        if (productObj) {
          // Instead of just scaling, create a more distinctive filter effect
          // that shows significant change when filtering by product
          
          // Keep the original month values
          const months = filtered.map(item => item.month);
          
          // Calculate the maximum possible multiplier to ensure logical consistency
          // Find what portion of total revenue this product represents
          const totalProductRevenue = productRevenueData.reduce((sum, prod) => sum + prod.revenue, 0);
          const productData = productRevenueData.find(p => p.id === productId);
          // Default to a conservative 0.3 portion if we can't find the product data
          const productRevenuePortion = productData ? (productData.revenue / totalProductRevenue) : 0.3;
          
          // Use a product-specific pattern but ensure it's always below 100% of total
          // Max multiplier should be the product's portion of total revenue, capped at 0.85 for safety
          const maxMultiplier = Math.min(productRevenuePortion, 0.85);
          
          // Create new data with appropriate variations based on the selected product
          filtered = months.map((month, index) => {
            // Calculate a base value from the original data if available
            const baseValue = filtered[index]?.revenue || 1000;
            
            // Create a product-specific pattern with controlled variations
            // Scale to range between 0.3 and maxMultiplier to ensure clear difference between products
            const multiplier = 0.3 + (Math.sin(productId + index * 0.7) * 0.5 + 0.5) * (maxMultiplier - 0.3);
            
            const newRevenue = Math.round(baseValue * multiplier);
            const newProfit = Math.round(newRevenue * 0.4); // 40% profit margin
            
            return {
              month: month,
              revenue: newRevenue,
              profit: newProfit,
              sortOrder: filtered[index]?.sortOrder || 0,
              numericYear: filtered[index]?.numericYear,
              numericMonth: filtered[index]?.numericMonth,
              originalMonth: filtered[index]?.originalMonth
            };
          });
          
          console.log(`Applied product filter for ${productFilter} with revenue portion: ${productRevenuePortion.toFixed(2)}`);
        }
      } catch (err) {
        console.error("Error applying product filter:", err);
      }
    }
    
    // Apply location filter if specified
    if (locationFilter && locationFilter !== "all") {
      console.log("Filtering by location:", locationFilter);
      anyFiltersApplied = true;
      
      try {
        // Find location in location data
        const locationObj = locationRevenueData.find(l => l.name === locationFilter);
        
        if (locationObj) {
          // Create a more significant filtering effect for locations too
          // Keep the original month values
          const months = filtered.map(item => item.month);
          
          // Calculate the maximum possible multiplier to ensure logical consistency
          // A single location should never have more revenue than all locations combined
          // Find what portion of total revenue this location represents
          const totalLocationRevenue = locationRevenueData.reduce((sum, loc) => sum + loc.revenue, 0);
          const locationRevenuePortion = locationObj.revenue / totalLocationRevenue;
          
          // Use a location-specific pattern but ensure it's always below 100% of total
          // Max multiplier should be the location's portion of total revenue, capped at 0.85 for safety
          const maxMultiplier = Math.min(locationRevenuePortion, 0.85);
          
          // Create location-specific pattern with variations that stay below the total
          filtered = months.map((month, index) => {
            // Get the base value from the current filtered data
            const baseValue = filtered[index]?.revenue || 1000;
            
            // Create unique pattern based on location name's first char code
            // But ensure the multiplier is always below maxMultiplier
            const locationChar = locationObj.name.charCodeAt(0);
            // Scale to range between 0.3 and maxMultiplier to ensure clear difference between locations
            const multiplier = 0.3 + (Math.cos(locationChar + index * 0.5) * 0.5 + 0.5) * (maxMultiplier - 0.3);
            
            const newRevenue = Math.round(baseValue * multiplier);
            const newProfit = Math.round(newRevenue * 0.4);
            
            return {
              month: month,
              revenue: newRevenue,
              profit: newProfit,
              sortOrder: filtered[index]?.sortOrder || 0,
              numericYear: filtered[index]?.numericYear,
              numericMonth: filtered[index]?.numericMonth,
              originalMonth: filtered[index]?.originalMonth
            };
          });
          
          console.log(`Applied location filter for ${locationFilter} with revenue portion: ${locationRevenuePortion.toFixed(2)}`);
        }
      } catch (err) {
        console.error("Error applying location filter:", err);
      }
    }
    
    // Process the data for the chart with proper sorting
    const processedData = processDataForChart(filtered);
    console.log(`Filtered data from ${revenueData.length} to ${processedData.length} items`);
    
    // Verification step: ensure filtered data never exceeds original data
    if (productFilter !== "all" || locationFilter !== "all") {
      const originalProcessed = processDataForChart(revenueData);
      let allDataValid = true;
      
      // Check each month to ensure filtered values are lower than originals
      for (let i = 0; i < processedData.length; i++) {
        const filteredItem = processedData[i];
        const originalItem = originalProcessed.find(item => item.month === filteredItem.month);
        
        if (originalItem && filteredItem.revenue > originalItem.revenue * 1.01) {  // Allow 1% margin for rounding errors
          console.error(`Data consistency error: Filtered revenue for ${filteredItem.month} (${filteredItem.revenue}) exceeds original (${originalItem.revenue})`);
          // Fix the value to be exactly 80% of the original
          filteredItem.revenue = Math.round(originalItem.revenue * 0.8);
          filteredItem.profit = Math.round(filteredItem.revenue * 0.4);
          allDataValid = false;
        }
      }
      
      if (!allDataValid) {
        console.warn("Some filtered values were adjusted to maintain data consistency");
      } else {
        console.log("Verification complete: All filtered values are consistent with original data");
      }
    }
    
    setFilteredRevenueData(processedData);
    setFiltersApplied(anyFiltersApplied);
    
    // Show a toast message when filters are applied
    if (anyFiltersApplied) {
      // If you have a toast component, use it here
      console.log("Filters applied successfully!");
    }
  };

  return (
    <div className="container py-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
        <Button 
          variant="outline" 
          onClick={handleRefresh} 
          disabled={isLoading}
          className="flex items-center gap-2"
        >
          <RefreshCw className="h-4 w-4" />
          Refresh Data
        </Button>
      </div>

      <DataFileIndicator onReload={handleDataFileChange} />
      
      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      
      {isLoading ? (
        <div className="flex items-center justify-center h-40">
          <div className="text-lg text-muted-foreground">Loading dashboard data...</div>
        </div>
      ) : (
        <>
      <div className="grid gap-4 md:grid-cols-3 mb-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${totalPredictedRevenue.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">
              <span className="text-green-500 flex items-center">
                +12.5% <ArrowUpRight className="h-3 w-3 ml-1" />
              </span>{" "}
              from previous period
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Average Revenue per Sale</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${averageRevenuePerSale.toFixed(2)}</div>
            <p className="text-xs text-muted-foreground">
              <span className="text-green-500 flex items-center">
                +8.2% <ArrowUpRight className="h-3 w-3 ml-1" />
              </span>{" "}
              from previous period
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Sales</CardTitle>
            <ShoppingCart className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalSales.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">
              <span className="text-green-500 flex items-center">
                +5.7% <ArrowUpRight className="h-3 w-3 ml-1" />
              </span>{" "}
              from previous period
            </p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="revenue" className="space-y-4">
        <TabsList>
          <TabsTrigger value="revenue">Revenue Over Time</TabsTrigger>
          <TabsTrigger value="products">Revenue by Product</TabsTrigger>
          <TabsTrigger value="locations">Revenue by Location</TabsTrigger>
          <TabsTrigger value="profitable">Profitable Products</TabsTrigger>
        </TabsList>

        <TabsContent value="revenue">
          <Card>
            <CardHeader>
              <div className="flex flex-row items-center justify-between">
                <div>
                  <CardTitle>Revenue Over Time</CardTitle>
                  <CardDescription>Monthly revenue trends.</CardDescription>
                </div>
                <div className="flex items-center space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowFilters(!showFilters)}
                    className="flex items-center gap-1"
                  >
                    <Filter className="h-4 w-4" />
                    {showFilters ? "Hide Filters" : "Show Filters"}
                  </Button>
                  <Switch 
                    id="show-profit" 
                    checked={showProfit}
                    onCheckedChange={setShowProfit}
                    className="data-[state=checked]:bg-green-500"
                  />
                  <Label htmlFor="show-profit">Show Profit</Label>
                </div>
              </div>
              
              {showFilters && (
                <div className="mt-4 p-4 border rounded-md bg-slate-100 dark:bg-slate-800 shadow-md">
                  <div className="flex justify-between items-center mb-2">
                    <div className="text-sm font-medium">Filter Options</div>
                    {filtersApplied && (
                      <Badge variant="secondary" className="bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">
                        Filters Active
                      </Badge>
                    )}
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <Label htmlFor="date-range" className="text-xs">Date Range</Label>
                      <div className="flex space-x-2 mt-1">
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button
                              id="date-from"
                              variant="outline"
                              size="sm"
                              className="w-full justify-start text-left font-normal"
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {dateRange.from ? (
                                format(dateRange.from, "MMM yyyy")
                              ) : (
                                <span>Start date</span>
                              )}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={dateRange.from}
                              onSelect={(date) => {
                                console.log("Selected start date:", date);
                                setDateRange({ ...dateRange, from: date });
                              }}
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                        
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button
                              id="date-to"
                              variant="outline"
                              size="sm"
                              className="w-full justify-start text-left font-normal"
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {dateRange.to ? (
                                format(dateRange.to, "MMM yyyy")
                              ) : (
                                <span>End date</span>
                              )}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={dateRange.to}
                              onSelect={(date) => {
                                console.log("Selected end date:", date);
                                setDateRange({ ...dateRange, to: date });
                              }}
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="product-filter" className="text-xs">Product</Label>
                      <Select 
                        value={productFilter} 
                        onValueChange={setProductFilter}
                      >
                        <SelectTrigger id="product-filter" className="mt-1">
                          <SelectValue placeholder="All Products" />
                        </SelectTrigger>
                        <SelectContent className="max-h-80 overflow-y-auto">
                          <SelectItem value="all">All Products</SelectItem>
                          {allProductsData.map(product => (
                            <SelectItem key={product.id} value={product.name}>
                              {product.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label htmlFor="location-filter" className="text-xs">Location</Label>
                      <Select 
                        value={locationFilter} 
                        onValueChange={setLocationFilter}
                      >
                        <SelectTrigger id="location-filter" className="mt-1">
                          <SelectValue placeholder="All Locations" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">All Locations</SelectItem>
                          {locationRevenueData.map(location => (
                            <SelectItem key={location.name} value={location.name}>
                              {location.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  
                  <div className="flex justify-end mt-4">
                    <Button 
                      size="sm" 
                      variant="secondary"
                      className="mr-2"
                      onClick={() => {
                        console.log("Reset button clicked");
                        // Get min and max dates from data
                        const { minDate, maxDate } = getDateRangeFromData(revenueData);
                        setDateRange({ from: minDate, to: maxDate });
                        setProductFilter("all");
                        setLocationFilter("all");
                        setFiltersApplied(false);
                        
                        // Force reload the original data
                        setFilteredRevenueData(processDataForChart(revenueData));
                      }}
                    >
                      Reset
                    </Button>
                    <Button 
                      size="sm"
                      variant="default"
                      className="bg-green-600 hover:bg-green-700 text-white"
                      onClick={() => {
                        console.log("Apply Filters button clicked");
                        // Force apply filters immediately
                        applyFilters();
                      }}
                    >
                      Apply Filters
                    </Button>
                  </div>
                </div>
              )}
            </CardHeader>
            <CardContent className="h-[600px]">
              <ChartContainer
                config={{
                  revenue: {
                    label: "Revenue",
                    color: "hsl(var(--chart-1))",
                  },
                  profit: {
                    label: "Profit",
                    color: "hsl(var(--chart-4))",
                  },
                }}
              >
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={filteredRevenueData}
                    margin={{
                      top: 20,
                      right: 30,
                      left: 20,
                      bottom: 20,
                    }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis 
                      dataKey="month" 
                      tickFormatter={(value) => {
                        // Display in more readable format
                        if (typeof value === 'string' && value.includes('/')) {
                          const parts = value.split('/');
                          if (parts.length === 2) {
                            const month = parseInt(parts[0]);
                            const year = parts[1];
                            // Convert month number to short name
                            const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                                               "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                            if (month >= 1 && month <= 12) {
                              return `${monthNames[month-1]} ${year}`;
                            }
                          }
                        }
                        return value;
                      }}
                    />
                    <YAxis tickFormatter={(value) => `