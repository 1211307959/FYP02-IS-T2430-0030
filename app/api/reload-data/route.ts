import { NextResponse } from 'next/server';\n\nexport const dynamic = 'force-dynamic'; // Disable static caching of this route\n\n/**\n * Handles POST requests to reload data files in the Flask backend\n */\nexport async function POST(request: Request) {\n  try {\n    console.log('Reload data API route triggered');\n    \n    // Call the Flask backend to reload data\n    const response = await fetch('http://localhost:5000/reload-data', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Flask API returned status ${response.status}: ${response.statusText}`);\n    }\n    \n    const result = await response.json();\n    \n    console.log('Data reload result:', result);\n    \n    // Dispatch event to notify frontend components\n    // Note: This will be handled by components listening for dataFileChanged events\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Data reloaded successfully',\n      ...result\n    });\n    \n  } catch (error) {\n    console.error('Error reloading data:', error);\n    \n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Failed to reload data: ' + (error instanceof Error ? error.message : 'Unknown error') \n      },\n      { status: 500 }\n    );\n  }\n}" 